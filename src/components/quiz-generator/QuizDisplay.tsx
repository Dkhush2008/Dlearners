// src/components/quiz-generator/QuizDisplay.tsx
"use client";

import * as React from "react";
import type { QuizQuestion } from "@/lib/types";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { CheckCircle, Eye, FileText, HelpCircle } from "lucide-react";

interface QuizDisplayProps {
  questions: QuizQuestion[];
}

export function QuizDisplay({ questions }: QuizDisplayProps) {
  const [showAnswers, setShowAnswers] = React.useState<Record<string, boolean>>({});

  const toggleAnswer = (questionId: string) => {
    setShowAnswers(prev => ({ ...prev, [questionId]: !prev[questionId] }));
  };

  const getDifficultyBadgeVariant = (difficulty: 'easy' | 'medium' | 'hard') => {
    switch (difficulty) {
      case 'easy': return 'default'; // Using default for easy (often green or blue by theme)
      case 'medium': return 'secondary'; // Using secondary for medium (often yellow or orange by theme)
      case 'hard': return 'destructive'; // Using destructive for hard (often red by theme)
      default: return 'outline';
    }
  };


  return (
    <Card className="shadow-lg">
      <CardHeader>
        <CardTitle className="font-headline flex items-center gap-2">
          <FileText className="h-6 w-6 text-primary" />
          Generated Quiz
        </CardTitle>
        <CardDescription>Review the questions generated by the AI. You can reveal answers individually.</CardDescription>
      </CardHeader>
      <CardContent>
        {questions.length === 0 ? (
          <p className="text-muted-foreground text-center py-8">No questions generated.</p>
        ) : (
          <Accordion type="single" collapsible className="w-full space-y-3">
            {questions.map((q, index) => (
              <AccordionItem value={`item-${index}`} key={q.id} className="border rounded-lg overflow-hidden bg-background hover:bg-muted/30 transition-colors">
                <AccordionTrigger className="px-4 py-3 hover:no-underline">
                  <div className="flex items-center justify-between w-full">
                    <span className="text-left font-medium text-foreground">
                      <HelpCircle className="inline h-5 w-5 mr-2 text-primary/80" /> Question {index + 1}: {q.question}
                    </span>
                    <Badge variant={getDifficultyBadgeVariant(q.difficulty)} className="capitalize ml-2 shrink-0">
                      {q.difficulty}
                    </Badge>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-4 pb-4 pt-0 space-y-3 bg-muted/20">
                  {q.options && q.options.length > 0 && (
                    <div className="space-y-2 mt-2">
                      <p className="text-sm font-medium text-muted-foreground">Options:</p>
                      <ul className="list-disc list-inside pl-2 space-y-1">
                        {q.options.map((option, i) => (
                          <li key={i} className="text-sm text-foreground">{option}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {showAnswers[q.id] ? (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-md">
                      <p className="text-sm font-semibold text-green-700 flex items-center">
                        <CheckCircle className="h-4 w-4 mr-2"/> Answer:
                      </p>
                      <p className="text-sm text-green-600">{Array.isArray(q.answer) ? q.answer.join(", ") : q.answer}</p>
                    </div>
                  ) : (
                     <Button variant="outline" size="sm" onClick={() => toggleAnswer(q.id)} className="mt-2">
                        <Eye className="mr-2 h-4 w-4" /> Reveal Answer
                    </Button>
                  )}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        )}
      </CardContent>
      {questions.length > 0 && (
        <CardFooter className="border-t pt-4">
            <Button variant="secondary" onClick={() => setShowAnswers(prev => questions.reduce((acc, q) => ({...acc, [q.id]: !Object.values(prev).every(val => val) }), {})) }>
                {Object.values(showAnswers).every(val => val) && questions.length > 0 ? "Hide All Answers" : "Reveal All Answers"}
            </Button>
        </CardFooter>
      )}
    </Card>
  );
}
